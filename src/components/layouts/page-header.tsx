'use client';import React, { Suspense, useEffect } from 'react';import Image from 'next/image';import {  Breadcrumb,  BreadcrumbItem,  BreadcrumbLink,  BreadcrumbList,  BreadcrumbPage,  BreadcrumbSeparator} from '@/components/ui/breadcrumb';import { cn } from '@/lib/utils';import { motion } from 'framer-motion';interface PageHeaderProps {  title?: string;  description?: string;  backgroundImage?: string;}const PageHeader: React.FC<PageHeaderProps> = (  {    title,    description,    backgroundImage  }) => {  const renderHeader = () => {    const visible = { opacity: 1, y: 0, transition: { duration: 0.5 } };    const itemVariants = {      hidden: { opacity: 0, y: 10 },      visible    };    return (      <motion.div        initial="hidden"        animate="visible"        exit={{ opacity: 0, transition: { duration: 1 } }}        variants={{ visible: { transition: { staggerChildren: 0.3 } } }}        className={cn(          'relative flex flex-col justify-center z-10 py-20 lg:py-24 xl:py-40',          backgroundImage ? 'text-primary-foreground' : 'text-primary bg-gray-200'        )}      >        <div className="container text-center flex flex-col justify-center">          <div className="relative">            {title &&              <motion.h1                variants={{                  hidden: { opacity: 0, y: -20 },                  visible                }}                className={cn(                  'scroll-m-20 text-4xl font-semibold tracking-tight lg:text-6xl pb-2',                  backgroundImage ? 'text-primary-foreground' : 'text-primary'                )}              >                {title}              </motion.h1>            }            {description && (              <motion.div                variants={{                  hidden: { opacity: 0, y: -20 },                  visible                }}                className="w-full sm:w-3/4 xl:w-2/5 mx-auto">                <p className={cn(                  'text-primary-foreground text-md lg:text-lg',                  backgroundImage ? 'text-primary-foreground' : 'text-primary'                )}>                  {description}                </p>              </motion.div>            )}          </div>          {title && (            <Breadcrumb className="mx-auto text-white pt-3 sm:mt-2 lg:mt-8">              <BreadcrumbList>                <BreadcrumbItem>                  <BreadcrumbLink                    href="/"                    className={cn(                      'hover:underline',                      backgroundImage                        ? 'text-primary-foreground hover:text-primary-foreground/70'                        : 'text-primary/70 hover:text-primary/50'                    )}                  >                    Home                  </BreadcrumbLink>                </BreadcrumbItem>                <BreadcrumbSeparator className={backgroundImage ? 'text-primary-foreground' : 'text-primary'} />                <BreadcrumbItem>                  <BreadcrumbPage className={backgroundImage ? 'text-primary-foreground/70' : 'text-primary/70'}>                    {title}                  </BreadcrumbPage>                </BreadcrumbItem>              </BreadcrumbList>            </Breadcrumb>          )}        </div>      </motion.div>    );  };  return (    <>      <header className="relative">        {backgroundImage ? (          <div>            <div className="absolute h-full w-full">              <span className={cn( 'absolute w-full h-full z-10', backgroundImage ? 'bg-black/40' : 'bg-black' )}></span>              <Image                src={backgroundImage}                alt={title || 'Category'}                width={1728}                height={440}                priority                className="block h-full w-full max-w-full object-cover object-center z-0"              />            </div>            {renderHeader()}          </div>        ) : (          <div>            {renderHeader()}          </div>        )}      </header>    </>  );};PageHeader.displayName = 'PageHeader';export { PageHeader };