import NextAuth from 'next-auth';import Credentials from 'next-auth/providers/credentials';import { PrismaClient } from '@prisma/client';import { PrismaAdapter } from '@next-auth/prisma-adapter';import GitHub from 'next-auth/providers/github';// import { compare } from 'bcryptjs';const prisma = new PrismaClient();export const { handlers, auth, signIn, signOut } = NextAuth( {  session: { strategy: 'jwt' },  adapter: PrismaAdapter( prisma ),  secret: process.env.AUTH_SECRET,  providers: [    GitHub,    Credentials( {      credentials: {        email: { label: 'Email', type: 'text' },        password: { label: 'Password', type: 'password' }      },      authorize: async (credentials) => {        const { email, password } = credentials;        // const user = await prisma.user.findUnique({ where: { email } });        const user = {          username: 'Garik',          email: 'garik.28h@gmail.com',          password: '123456'        };        if (!user) {          throw new Error( 'Not user found' );        }        return user;      }    } )  ]  // callbacks: {  //   async session({ session, token }) {  //     session.user.isAdmin = token.isAdmin;  //     return session;  //   },  //   async jwt({ token, user }) {  //     if (user) {  //       token.isAdmin = user.isAdmin;  //     }  //  //     return token;  //   }  // }  // callbacks: {  //     async session({session, token}) {  //         if (token) {  //             // @ts-ignore  //             session.user.id = token.id;  //             // session.user.role = token.role;  //         }  //         return session;  //     },  //     async jwt({token, user}) {  //         if (user) {  //             token.id = user.id;  //             // token.role = user.role;  //         }  //         return token;  //     },  // },  // pages: {  //     signIn: '/auth/signin',  //     signOut: '/auth/signout',  //     error: '/auth/error',  //     verifyRequest: '/auth/verify-request',  //     newUser: null // Disable the new account creation page  // }} );