import NextAuth from "next-auth";import {PrismaAdapter} from "@next-auth/prisma-adapter";import CredentialsProvider from "next-auth/providers/credentials";import { compare } from "bcryptjs";import prisma from "@/lib/prisma";export const authOptions = {    adapter: PrismaAdapter(prisma),    providers: [        // CredentialsProvider({        //     name: "Credentials",        //     credentials: {        //         username: {label: "Username", type: "text", placeholder: "jsmith"},        //         password: {label: "Password", type: "password"}        //     },        //     async authorize(credentials, req) {        //         const user = {id: "1", name: "J Smith", email: "jsmith@example.com"}        //        //         if (user) {        //             return user        //         } else {        //             return null        //         }        //     }        // }),        CredentialsProvider({            name: "Credentials",            credentials: {                email: { label: "Email", type: "email", placeholder: "jsmith@example.com" },                password: { label: "Password", type: "password" },            },            async authorize(credentials) {                const user = await prisma.user.findUnique({                    where: { email: credentials?.email },                });                if (user && (await compare(credentials?.password || "", user.password))) {                    return user;                }                return null;            },        }),    ],    // secret: process.env.NEXTAUTH_SECRET}export default NextAuth(authOptions);