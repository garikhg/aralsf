// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Post {
  id        String  @id @default(cuid())
  title     String
  content   String?
  published Boolean @default(false)
  author    User?   @relation(fields: [authorId], references: [id])
  authorId  String?
}

model User {
  id       String    @id @default(cuid())
  name     String?
  username String?
  email    String?   @unique
  password String?
  image    String?
  posts    Post[]
  Roles    Roles[]
  Session  Session[]

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  @@map(name: "users")
}

model Roles {
  id     Int    @id @default(autoincrement())
  name   String @unique
  users  User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expires      DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// model VerificationToken {
//   id         Int      @id @default(autoincrement())
//   identifier String
//   token      String   @unique
//   expires    DateTime
//
//   @@unique([identifier, token])
//   @@map("verificationtokens")
// }
