// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

enum Role {
  USER
  ADMIN
}

model User {
  id            String  @id @default(cuid())
  user_login    String?
  user_pass     String?
  user_nicename String?
  user_email    String? @unique
  user_image    String?
  display_name  String?
  role          Role    @default(USER)

  createdAt DateTime  @default(now()) @map(name: "created_at")
  updatedAt DateTime  @updatedAt @map(name: "updated_at")
  Post      Post[]
  Product   Product[]

  @@map(name: "users")
}

model Post {
  id        String  @id @default(cuid())
  title     String
  content   String
  published Boolean @default(false)

  // Foreign key to User
  authorId String
  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  @@map(name: "posts")
}

model Product {
  id          Int      @id @default(autoincrement())
  name        String
  sku         String   @unique
  alco        Float? // Alcohol percentage, nullable if not applicable
  perCase     String? // Number of bottles per case
  bottleSize  String? // Example: "750ml"
  image       String?
  description String?  @db.Text
  published   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationship with User
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map(name: "products")
}
