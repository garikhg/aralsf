import {Injectable, UnauthorizedException} from '@nestjs/common';import {PassportStrategy} from '@nestjs/passport';import {ExtractJwt, Strategy} from 'passport-jwt';import {InjectModel} from "@nestjs/mongoose";import {Model} from "mongoose";import {User} from "../users/schemas/user.schema";import {JwtPayload} from './jwt-payload.interface';@Injectable()export class JwtStrategy extends PassportStrategy(Strategy) {    constructor(@InjectModel(User.name) private userModel: Model<User>) {        super({            jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),            secretOrKey: '2Vm5JTERlTrdG3KxdoqW1wL-g7RFM8OPjlvegVfynqk'        });    }    async validate(payload: JwtPayload) {        const {username} = payload;        const user = await this.userModel.findOne({username});        if (!user) {            throw new UnauthorizedException();        }        return user;    }}