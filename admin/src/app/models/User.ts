import mongoose, {Document, Model, Schema} from "mongoose";import bcrypt from "bcryptjs";export interface IUser extends Document {    username: string;    password: string;    email: string;    matchPassword: (password: string) => Promise<boolean>;}const UserSchema: Schema<IUser> = new Schema({    username: {        type: String,        required: true,        unique: true,    },    password: {        type: String,        required: true,    },    email: {        type: String,        required: true,        unique: true,    },});UserSchema.pre<IUser>('save', async function (next) {    if (!this.isModified('password')) return next();    const salt = await bcrypt.genSalt(10);    this.password = await bcrypt.hash(this.password, salt);    next();});UserSchema.methods.matchPassword = async function (password: string) {    return await bcrypt.compare(password, this.password);}const User: Model<IUser> = mongoose.models.User || mongoose.model<IUser>('User', UserSchema);export default User;