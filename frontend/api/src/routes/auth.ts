import {Router, Request, Response} from "express";import bcrypt from "bcryptjs";import jwt from "jsonwebtoken";import User, {UserDocument} from "../models/User";import dotenv from "dotenv";dotenv.config();const router: Router = Router();const jwtSecret = process.env.JWT_SECRET || '';if (!jwtSecret) {    throw new Error("JWT_SECRET is not defined in the environment variables");}// Register a new userrouter.post("/register", async (req: Request, res: Response) => {    const {username, email, role, password} = req.body;    try {        let user = await User.findOne({username: username});        if (user) return res.status(400).json({message: 'User already exists'});        const salt = await bcrypt.genSalt(10);        const hashedPassword = await bcrypt.hash(password, salt);        user = new User({username, email, role, password: hashedPassword});        await user.save();        const payload = {id: user.id};        const token = jwt.sign(payload, jwtSecret, {expiresIn: "1h"});        res.status(201).json({token});    } catch (err) {        res.status(500).json({message: err});    }});// Login a userrouter.post("/login", async (req: Request, res: Response) => {    const {username, password} = req.body;    try {        let user: UserDocument | null = await User.findOne({username});        if (!user) return res.status(400).json({message: 'Invalid credentials'});        const isMatch = await bcrypt.compare(password, user.password);        if (!isMatch) return res.status(400).json({message: 'Invalid credentials'});        const payload = {id: user.id};        const token = jwt.sign(payload, jwtSecret, {expiresIn: "1h"});        res.status(201).json({token});    } catch (err) {        res.status(500).json({message: err});    }});export default router;